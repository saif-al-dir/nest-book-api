// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Author {
  id      String  @id @default(uuid())
  name    String  @unique
  country String
  books   Book[]  // one-to-many relationship
}

model Book {
  id        String   @id @default(uuid())
  title     String   @unique
  rating    Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation with Author
  authorId String
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  users     UserOnBooks[]
}

model UserOnBooks {
  book   Book @relation(fields: [bookId], references: [id])
  bookId String
  user   User @relation(fields: [userId], references: [id])
  userId String

  @@id([bookId, userId]) // composite primary key
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  role     Role      @default(USER)
  password Password?

  books    UserOnBooks[]
}

model Password {
  id             String @id @default(uuid())
  hashedPassword String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String @unique
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
}


model Order {
  id        Int      @id @default(autoincrement())
  productId Int
  quantity  Int
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id])
}


